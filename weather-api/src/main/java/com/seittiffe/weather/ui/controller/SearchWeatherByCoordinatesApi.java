/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.seittiffe.weather.ui.controller;

import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.util.Optional;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import com.seittiffe.weather.ui.model.Status;
import com.seittiffe.weather.ui.model.WeatherResponse;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-05T15:30:51.630808200-04:00[America/Santiago]")
@Validated
@Tag(name = "searchWeatherByCoordinates", description = "the searchWeatherByCoordinates API")
public interface SearchWeatherByCoordinatesApi {

	default Optional<NativeWebRequest> getRequest() {
		return Optional.empty();
	}

	/**
	 * GET /searchWeatherByCoordinates Search weather information using longitude
	 * and latitude values
	 *
	 * @param latitude  The navigational coordinate recorded as an angular distance
	 *                  (degrees) north or south of the earth equator (required)
	 * @param longitude The navigational coordinate measured as a meridian that
	 *                  passes through each of the earth poles (required)
	 * @param metric    Unit measure system (required)
	 * @return 200 - Success (status code 200) or 400 - Bad Request (status code
	 *         400) or 500 - Internal Server Error (status code 500)
	 */
	@Operation(operationId = "searchByCoordinates", description = "Search weather information using longitude and latitude values", responses = {
			@ApiResponse(responseCode = "200", description = "200 - Success", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = WeatherResponse.class)) }),
			@ApiResponse(responseCode = "400", description = "400 - Bad Request", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = Status.class)) }),
			@ApiResponse(responseCode = "500", description = "500 - Internal Server Error", content = {
					@Content(mediaType = "application/json", schema = @Schema(implementation = Status.class)) }) })
            @GetMapping(value = "/searchWeatherByCoordinates", produces = {
                    "application/json"})
	ResponseEntity<WeatherResponse> searchByCoordinates(
			@NotNull @Parameter(name = "lat", description = "The navigational coordinate recorded as an angular distance (degrees) north or south of the earth equator", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "lat", required = true) BigDecimal latitude,
			@NotNull @Parameter(name = "lon", description = "The navigational coordinate measured as a meridian that passes through each of the earth poles", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "lon", required = true) BigDecimal longitude,
			@NotNull @Parameter(name = "unit", description = "Unit measure system", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "unit", required = true) String metric) throws UnsupportedEncodingException;
}
